{"version":3,"file":"_B6UVtoii.js","sources":["../../../src/components/game/game.marko"],"sourcesContent":["export enum TileType {\n  Empty,\n  Ground,\n  Fire,\n  Start,\n  Goal,\n  DirectLeft,\n  DirectRight,\n  Spring,\n  SpeedRight,\n  SpeedLeft,\n  Collectible,\n}\nstatic const tileClasses: { [type in TileType]?: string } = {\n  [TileType.Ground]: \"ground\",\n  [TileType.Fire]: \"fire\",\n  [TileType.Goal]: \"goal\",\n  [TileType.DirectLeft]: \"left-sign\",\n  [TileType.DirectRight]: \"right-sign\",\n  [TileType.Spring]: \"spring\",\n  [TileType.SpeedLeft]: \"speed-left\",\n  [TileType.SpeedRight]: \"speed-right\",\n  [TileType.Collectible]: \"collectible\",\n};\nexport interface Input {\n  tiles: TileType[][];\n  onVictory: () => void;\n}\nstatic declare global {\n  namespace Marko {\n    namespace CSS {\n      export interface Properties {\n        \"--x\": number;\n        \"--y\": number;\n      }\n    }\n  }\n}\n\nconst/startPos=((): [number, number] => {\n  for (let i = 0; i < input.tiles.length; i++) {\n    for (let j = 0; j < input.tiles[i].length; j++) {\n      if (input.tiles[i][j] === TileType.Start) {\n        return [j, i];\n      }\n    }\n  }\n  return [0, 0];\n})()\n\nlet/ballPos=[...startPos]\nclient function now() {\n  return +document.timeline.currentTime!;\n}\n\nlet/lastFrame=null as number | null\nlet/jumping=false\n\nconst/startOrJump() {\n  if (lastFrame === null) {\n    lastFrame = now();\n  } else {\n    jumping = true;\n  }\n}\n\nscript\n  --\n  document.addEventListener(\n    \"keydown\",\n    (e) => {\n      if (\n        e.target instanceof Element &&\n        e.target.matches(\"button, [role='button'], input, select, textarea\")\n      ) {\n        return;\n      }\n      if (e.key === \" \") {\n        startOrJump();\n      }\n    },\n    {\n      signal: $signal,\n    },\n  );\n  document.addEventListener(\n    \"keyup\",\n    (e) => {\n      if (e.key === \" \") {\n        jumping = false;\n      }\n    },\n    {\n      signal: $signal,\n    },\n  );\n  --\n\nlocal-let/deaths=0 key=`level-${$global.params.id}-deaths`\nlocal-let/victory=false key=`level-${$global.params.id}-victory`\nstatic const GRAVITY = 0.015;\nstatic const BASE_SPEED = 2;\n\nlet/velX=BASE_SPEED\nlet/velY=0\nlet/collected=({} as { [key: `${number},${number}`]: boolean })\n\nlet/dummy=true\nstatic const FRAME_RATE = 1000 / 60;\nscript\n  --\n  if (lastFrame !== null) {\n    dummy = !dummy;\n    const currentTime = now();\n    let gameTime: number | null = lastFrame;\n    if (gameTime && currentTime - gameTime > FRAME_RATE * 30) {\n      gameTime = currentTime;\n    } else if (gameTime && currentTime - gameTime > FRAME_RATE) {\n      gameTime += FRAME_RATE;\n      let nextPos = [ballPos[0] + velX * 0.05, ballPos[1] + velY];\n\n      // ground collision\n      if (\n        input.tiles[Math.floor(nextPos[1] + 1)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ] === TileType.Ground\n      ) {\n        velY = jumping ? GRAVITY * -16 : 0;\n        nextPos[1] = Math.floor(nextPos[1]);\n      } else {\n        velY += GRAVITY;\n      }\n\n      // death\n      if (\n        nextPos[1] > input.tiles.length + 10 ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 1)\n        ] === TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.8)]?.[\n          Math.floor(nextPos[0] + 0.8)\n        ] === TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[Math.floor(nextPos[0])] ===\n          TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.2)]?.[\n          Math.floor(nextPos[0] + 0.8)\n        ] === TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ] === TileType.Fire\n      ) {\n        nextPos = [...startPos];\n        gameTime = null;\n        velX = BASE_SPEED;\n        velY = 0;\n        deaths++;\n        collected = {};\n      }\n      switch (\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ]\n      ) {\n        case TileType.Goal:\n          gameTime = null;\n          victory = true;\n          input.onVictory();\n          break;\n        case TileType.DirectLeft:\n          velX = -Math.abs(velX);\n          break;\n        case TileType.DirectRight:\n          velX = Math.abs(velX);\n          break;\n        case TileType.Spring:\n          velY = GRAVITY * -26;\n          break;\n        case TileType.SpeedLeft:\n          if (\n            (Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5) ||\n              Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5)) &&\n            velX !== BASE_SPEED\n          ) {\n            velX -= BASE_SPEED / 2;\n          }\n          break;\n        case TileType.SpeedRight:\n          if (\n            (Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5) ||\n              Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5)) &&\n            velX !== -BASE_SPEED\n          ) {\n            velX += BASE_SPEED / 2;\n          }\n          break;\n        case TileType.Collectible:\n          if (\n            Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5) ||\n            Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5)\n          ) {\n            collected = {\n              ...collected,\n              [`${Math.floor(nextPos[0] + 0.5)},${Math.floor(nextPos[1] + 0.5)}`]: true,\n            };\n          }\n          break;\n      }\n      ballPos = nextPos;\n    }\n    lastFrame = gameTime;\n  }\n  --\n\ndiv.game [\n  onPointerdown=startOrJump\n  onPointerup() {\n    jumping = false;\n  }\n]\n  div.view style={ \"--x\": ballPos[0], \"--y\": ballPos[1] }\n    div class={\n      ball: true,\n      moving: lastFrame !== null,\n    }\n\n    for|{ x, y, type }| of=input.tiles.flatMap((row, y) =>\n      row.flatMap((type, x) =>\n        type === TileType.Empty || type === TileType.Start\n          ? []\n          : [{ x, y, type }],\n      ),\n    )\n      const/tileClass=tileClasses[type]\n      if=tileClass\n        div [\n          class=[tileClass, collected[`${x},${y}`] && \" collected\"]\n          style={ \"--x\": x, \"--y\": y }\n        ]\n      html-comment\n\nstyle\n  --\n  .game {\n    position: fixed;\n    inset: 0;\n    z-index: -1;\n    user-select: none;\n    view-transition-name: level;\n  }\n\n  .game .view {\n    position: absolute;\n    left: calc(50vw - 2.5vmax + var(--x) * -5vmax);\n    top: calc(50vh - 2.5vmax + var(--y) * -5vmax);\n  }\n\n  .game .view div {\n    position: absolute;\n    width: 5vmax;\n    height: 5vmax;\n    left: calc(var(--x) * 5vmax);\n    top: calc(var(--y) * 5vmax);\n    background-size: cover;\n    image-rendering: pixelated;\n  }\n\n  .ground {\n    background-image: url(\"assets/ground.png\");\n    z-index: -1;\n  }\n\n  .goal {\n    background-image: url(\"assets/flag.png\");\n  }\n\n  .left-sign {\n    background-image: url(\"assets/left-sign.png\");\n  }\n\n  .right-sign {\n    background-image: url(\"assets/right-sign.png\");\n  }\n\n  .spring {\n    background-image: url(\"assets/spring.png\");\n  }\n\n  .speed-left {\n    background-image: url(\"assets/speed-left.png\");\n  }\n\n  .speed-right {\n    background-image: url(\"assets/speed-right.png\");\n  }\n\n  .fire {\n    background-image: url(\"assets/fire.gif\");\n  }\n\n  .ball {\n    background-image: url(\"assets/ball.png\");\n    z-index: 1;\n\n    transform: rotate(calc(var(--x) * 45deg));\n\n    view-transition-name: ball;\n  }\n\n  .collectible {\n    background-image: url(\"assets/collectible.gif\");\n\n    &.collected {\n      transition: 1s all;\n      transform: translateY(-5vmax) rotate(720deg) scale(1.5);\n      opacity: 0;\n    }\n  }\n\n  ::view-transition-old(ball) {\n    animation: 250ms ease-out both ball-exit;\n  }\n  ::view-transition-new(ball) {\n    animation: 250ms 1s ease-out both ball-exit reverse;\n  }\n  @keyframes ball-exit {\n    from {\n      translate: 0 0;\n    }\n    to {\n      translate: 0 -70vh;\n    }\n  }\n\n  ::view-transition-old(level) {\n    animation: 1s linear both slide-to-left;\n  }\n  ::view-transition-new(level) {\n    animation: 1s linear both slide-from-right;\n  }\n  @keyframes slide-to-left {\n    from {\n      translate: 0 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    to {\n      translate: -200% 0;\n      opacity: 0;\n    }\n  }\n  @keyframes slide-from-right {\n    from {\n      translate: 200% 0;\n      opacity: 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    to {\n      translate: 0 0;\n    }\n  }\n  --\n"],"names":["TileType","Ground","Fire","Goal","DirectLeft","DirectRight","Spring","SpeedLeft","SpeedRight","Collectible","now","_now","GRAVITY","BASE_SPEED","FRAME_RATE","_expr_collected_x_y_tileClass$ifBody","_$","_scope","_","collected","x","y","tileClass","_expr_x_y$ifBody","_collected$ifBody","_tileClass$ifBody","_y$ifBody","_x$ifBody","_ifBody","_if$forBody","_tileClass$forBody","_type_type$forBody","type_type","_type$forBody","type","_y$forBody","_x$forBody","_pattern_$forBody","_pattern_","_params_2$forBody","_params_2","_forBody","_expr_input_tiles_input_onVictory_startPos_ballPos_0_ballPos_1_lastFrame_jumping_deaths_velX_velY_collected_dummy_effect","input_tiles","input_onVictory","startPos","ballPos_0","ballPos_1","lastFrame","jumping","deaths","velX","velY","dummy","_dummy","currentTime","gameTime","nextPos","Math","floor","_velY","length","_velX","_collected","abs","_ballPos","_lastFrame","_expr_input_tiles_input_onVictory_startPos_ballPos_0_ballPos_1_lastFrame_jumping_deaths_velX_velY_collected_dummy","_expr_input_tiles_length_input_tiles_i_length_input_tiles_i_j","_startPos","_startPos2","_expr_ballPos_0_ballPos_","_for","_deaths","_startOrJump_effect","startOrJump","document","addEventListener","e","target","Element","matches","key","signal","_jumping","_startOrJump","ball","moving","_startOrJump2","_ballPos_2","_victory","victory","_ballPos_","ballPos","_input_onVictory_","_input_tiles_i_j","_input_tiles_i_length","_input_tiles_i","input_tiles_i","j","_input_tiles_length","_input_tiles_","i","flatMap","row","Empty","Start","_setup__effect","_setup_","_localLet","_localLet_input","value","$global","params","id","timeline","input_tiles_length","input_tiles_i_length","input_tiles_i_j"],"mappings":"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"}