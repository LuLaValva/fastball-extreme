{"version":3,"file":"_BBdFjbEY.js","sources":["../../../src/components/game/game.marko"],"sourcesContent":["export enum TileType {\n  Empty,\n  Tile,\n  Spikes,\n  Start,\n  Goal,\n  DirectLeft,\n  DirectRight,\n  Spring,\n  SpeedRight,\n  SpeedLeft,\n}\nexport interface Input {\n  tiles: TileType[][];\n  onVictory: () => void;\n}\nstatic declare global {\n  namespace Marko {\n    namespace CSS {\n      export interface Properties {\n        \"--x\": number;\n        \"--y\": number;\n      }\n    }\n  }\n}\n\nconst/startPos=((): [number, number] => {\n  for (let i = 0; i < input.tiles.length; i++) {\n    for (let j = 0; j < input.tiles[i].length; j++) {\n      if (input.tiles[i][j] === TileType.Start) {\n        return [j, i];\n      }\n    }\n  }\n  return [0, 0];\n})()\n\nlet/ballPos=[...startPos]\nclient function now() {\n  return +document.timeline.currentTime!;\n}\n\nlet/lastFrame=null as number | null\nlet/jumping=false\n\nconst/startOrJump() {\n  if (lastFrame === null) {\n    lastFrame = now();\n  } else {\n    jumping = true;\n  }\n}\n\nscript\n  --\n  document.addEventListener(\n    \"keydown\",\n    (e) => {\n      if (\n        e.target instanceof Element &&\n        e.target.matches(\"button, [role='button'], input, select, textarea\")\n      ) {\n        return;\n      }\n      if (e.key === \" \") {\n        startOrJump();\n      }\n    },\n    {\n      signal: $signal,\n    },\n  );\n  document.addEventListener(\n    \"keyup\",\n    (e) => {\n      if (e.key === \" \") {\n        jumping = false;\n      }\n    },\n    {\n      signal: $signal,\n    },\n  );\n  --\n\nlocal-let/deaths=0 key=`level-${$global.params.id}-deaths`\nlocal-let/victory=false key=`level-${$global.params.id}-victory`\nstatic const GRAVITY = 0.015;\nstatic const BASE_SPEED = 0.1;\n\nlet/velX=BASE_SPEED\nlet/velY=0\n\nlet/dummy=true\nstatic const FRAME_RATE = 1000 / 60;\nscript\n  --\n  if (lastFrame !== null) {\n    dummy = !dummy;\n    const currentTime = now();\n    let gameTime: number | null = lastFrame;\n    if (gameTime && currentTime - gameTime > FRAME_RATE) {\n      gameTime += FRAME_RATE;\n      let nextPos = [ballPos[0] + velX, ballPos[1] + velY];\n\n      // ground collision\n      if (\n        input.tiles[Math.floor(nextPos[1] + 1)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ] === TileType.Tile\n      ) {\n        velY = jumping ? GRAVITY * -16 : 0;\n        nextPos[1] = Math.floor(nextPos[1]);\n      } else {\n        velY += GRAVITY;\n      }\n\n      // death\n      if (\n        nextPos[1] > input.tiles.length + 10 ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 1)\n        ] === TileType.Tile ||\n        input.tiles[Math.floor(nextPos[1] + 0.8)]?.[\n          Math.floor(nextPos[0] + 0.8)\n        ] === TileType.Tile ||\n        input.tiles[Math.floor(nextPos[1])]?.[Math.floor(nextPos[0] + 0.5)] ===\n          TileType.Tile ||\n        input.tiles[Math.floor(nextPos[1] + 0.2)]?.[\n          Math.floor(nextPos[0] + 0.8)\n        ] === TileType.Tile ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ] === TileType.Spikes\n      ) {\n        nextPos = [...startPos];\n        gameTime = null;\n        velX = BASE_SPEED;\n        velY = 0;\n        deaths++;\n      }\n      switch (\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ]\n      ) {\n        case TileType.Goal:\n          gameTime = null;\n          victory = true;\n          input.onVictory();\n          break;\n        case TileType.DirectLeft:\n          velX = -Math.abs(velX);\n          break;\n        case TileType.DirectRight:\n          velX = Math.abs(velX);\n          break;\n        case TileType.Spring:\n          velY = GRAVITY * -26;\n          break;\n        case TileType.SpeedLeft:\n          if (\n            (Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5) ||\n              Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5)) &&\n            velX !== BASE_SPEED\n          ) {\n            velX -= BASE_SPEED / 2;\n          }\n          break;\n        case TileType.SpeedRight:\n          if (\n            (Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5) ||\n              Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5)) &&\n            velX !== -BASE_SPEED\n          ) {\n            velX += BASE_SPEED / 2;\n          }\n          break;\n      }\n      ballPos = nextPos;\n    }\n    lastFrame = gameTime;\n  }\n  --\n\ndiv.game [\n  onPointerdown=startOrJump\n  onPointerup() {\n    jumping = false;\n  }\n]\n  div.view style={ \"--x\": ballPos[0], \"--y\": ballPos[1] }\n    div [\n      class={\n        ball: true,\n        moving: lastFrame !== null,\n      }\n      style={\n        \"animation-duration\": 0.15 / Math.abs(velX) + \"s\",\n        \"animation-direction\": velX < 0 ? \"reverse\" : undefined,\n      }\n    ]\n\n    for|{ x, y, type }| of=input.tiles.flatMap((row, y) =>\n      row.flatMap((type, x) =>\n        type === TileType.Empty || type === TileType.Start\n          ? []\n          : [{ x, y, type }],\n      ),\n    )\n      if=type === TileType.Tile\n        div.tile style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.Spikes\n        div.spikes style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.Goal\n        div.goal style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.DirectLeft\n        div.left-sign style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.DirectRight\n        div.right-sign style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.Spring\n        div.spring style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.SpeedLeft\n        div.speed-left style={ \"--x\": x, \"--y\": y }\n      else if=type === TileType.SpeedRight\n        div.speed-right style={ \"--x\": x, \"--y\": y }\n      html-comment\n\nstyle\n  --\n  .game {\n    position: fixed;\n    inset: 0;\n    z-index: -1;\n    user-select: none;\n    view-transition-name: level;\n  }\n\n  .game .view {\n    position: absolute;\n    left: calc(50vw - 2.5vmax + var(--x) * -5vmax);\n    top: calc(50vh - 2.5vmax + var(--y) * -5vmax);\n  }\n\n  .game .view div {\n    position: absolute;\n    width: 5vmax;\n    height: 5vmax;\n    left: calc(var(--x) * 5vmax);\n    top: calc(var(--y) * 5vmax);\n    background-size: cover;\n    image-rendering: pixelated;\n  }\n\n  .tile {\n    background-image: url(\"assets/ground.png\");\n    z-index: -1;\n  }\n\n  .goal {\n    background-image: url(\"assets/flag.png\");\n  }\n\n  .left-sign {\n    background-image: url(\"assets/left-sign.png\");\n  }\n\n  .right-sign {\n    background-image: url(\"assets/right-sign.png\");\n  }\n\n  .spring {\n    background-image: url(\"assets/spring.png\");\n  }\n\n  .speed-left {\n    background-image: url(\"assets/speed-left.png\");\n  }\n\n  .speed-right {\n    background-image: url(\"assets/speed-right.png\");\n  }\n\n  .ball {\n    background-image: url(\"assets/ball.png\");\n    z-index: 1;\n\n    &.moving {\n      animation: spin linear infinite;\n    }\n\n    view-transition-name: ball;\n  }\n\n  .spikes {\n    background-image: url(\"assets/fire.gif\");\n  }\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  ::view-transition-old(ball) {\n    animation: 250ms ease-out both ball-exit;\n  }\n  ::view-transition-new(ball) {\n    animation: 250ms 1s ease-out both ball-exit reverse;\n  }\n  @keyframes ball-exit {\n    from {\n      translate: 0 0;\n    }\n    to {\n      translate: 0 -70vh;\n    }\n  }\n\n  ::view-transition-old(level) {\n    animation: 1s linear both slide-to-left;\n  }\n  ::view-transition-new(level) {\n    animation: 1s linear both slide-from-right;\n  }\n  @keyframes slide-to-left {\n    from {\n      translate: 0 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    to {\n      translate: -200% 0;\n      opacity: 0;\n    }\n  }\n  @keyframes slide-from-right {\n    from {\n      translate: 200% 0;\n      opacity: 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    to {\n      translate: 0 0;\n    }\n  }\n  --\n"],"names":["TileType","now","_now","GRAVITY","BASE_SPEED","FRAME_RATE","_expr_x_y$elseBody7","_$","_scope","_","x","y","_y$elseBody7","_x$elseBody7","_elseBody7","_expr_x_y$elseBody6","_y$elseBody6","_x$elseBody6","_elseBody6","_expr_x_y$elseBody5","_y$elseBody5","_x$elseBody5","_elseBody5","_expr_x_y$elseBody4","_y$elseBody4","_x$elseBody4","_elseBody4","_expr_x_y$elseBody3","_y$elseBody3","_x$elseBody3","_elseBody3","_expr_x_y$elseBody2","_y$elseBody2","_x$elseBody2","_elseBody2","_expr_x_y$elseBody","_y$elseBody","_x$elseBody","_elseBody","_expr_x_y$ifBody","_y$ifBody","_x$ifBody","_ifBody","_if$forBody","_type$forBody","type","Tile","Spikes","Goal","DirectLeft","DirectRight","Spring","SpeedLeft","SpeedRight","_y$forBody","_x$forBody","_pattern_$forBody","_pattern_","_params_2$forBody","_params_2","_forBody","_expr_input_tiles_input_onVictory_startPos_ballPos_0_ballPos_1_lastFrame_jumping_deaths_velX_velY_dummy_effect","input_tiles","input_onVictory","startPos","ballPos_0","ballPos_1","lastFrame","jumping","deaths","velX","velY","dummy","_dummy","currentTime","gameTime","nextPos","Math","floor","_velY","length","_velX","abs","_ballPos","_lastFrame","_expr_input_tiles_input_onVictory_startPos_ballPos_0_ballPos_1_lastFrame_jumping_deaths_velX_velY_dummy","_expr_input_tiles_length_input_tiles_i_length_input_tiles_i_j","_startPos","_startPos2","_expr_ballPos_0_ballPos_","_for","undefined","_deaths","_startOrJump_effect","startOrJump","document","addEventListener","e","target","Element","matches","key","signal","_jumping","_startOrJump","ball","moving","_startOrJump2","_ballPos_2","_victory","victory","_ballPos_","ballPos","_input_onVictory_","_input_tiles_i_j","_input_tiles_i_length","_input_tiles_i","input_tiles_i","j","_input_tiles_length","_input_tiles_","i","flatMap","row","Empty","Start","_setup__effect","_setup_","_localLet","_localLet_input","value","$global","params","id","timeline","input_tiles_length","input_tiles_i_length","input_tiles_i_j"],"mappings":"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"}