{"version":3,"file":"_Djb9T-fh.js","sources":["../../../src/components/game/game.marko"],"sourcesContent":["export enum TileType {\n  Empty,\n  Ground,\n  Fire,\n  Start,\n  Goal,\n  DirectLeft,\n  DirectRight,\n  Spring,\n  SpeedRight,\n  SpeedLeft,\n}\nstatic const tileClasses: { [type in TileType]?: string } = {\n  [TileType.Ground]: \"ground\",\n  [TileType.Fire]: \"fire\",\n  [TileType.Goal]: \"goal\",\n  [TileType.DirectLeft]: \"left-sign\",\n  [TileType.DirectRight]: \"right-sign\",\n  [TileType.Spring]: \"spring\",\n  [TileType.SpeedLeft]: \"speed-left\",\n  [TileType.SpeedRight]: \"speed-right\",\n};\nexport interface Input {\n  tiles: TileType[][];\n  onVictory: () => void;\n}\nstatic declare global {\n  namespace Marko {\n    namespace CSS {\n      export interface Properties {\n        \"--x\": number;\n        \"--y\": number;\n      }\n    }\n  }\n}\n\nconst/startPos=((): [number, number] => {\n  for (let i = 0; i < input.tiles.length; i++) {\n    for (let j = 0; j < input.tiles[i].length; j++) {\n      if (input.tiles[i][j] === TileType.Start) {\n        return [j, i];\n      }\n    }\n  }\n  return [0, 0];\n})()\n\nlet/ballPos=[...startPos]\nclient function now() {\n  return +document.timeline.currentTime!;\n}\n\nlet/lastFrame=null as number | null\nlet/jumping=false\n\nconst/startOrJump() {\n  if (lastFrame === null) {\n    lastFrame = now();\n  } else {\n    jumping = true;\n  }\n}\n\nscript\n  --\n  document.addEventListener(\n    \"keydown\",\n    (e) => {\n      if (\n        e.target instanceof Element &&\n        e.target.matches(\"button, [role='button'], input, select, textarea\")\n      ) {\n        return;\n      }\n      if (e.key === \" \") {\n        startOrJump();\n      }\n    },\n    {\n      signal: $signal,\n    },\n  );\n  document.addEventListener(\n    \"keyup\",\n    (e) => {\n      if (e.key === \" \") {\n        jumping = false;\n      }\n    },\n    {\n      signal: $signal,\n    },\n  );\n  --\n\nlocal-let/deaths=0 key=`level-${$global.params.id}-deaths`\nlocal-let/victory=false key=`level-${$global.params.id}-victory`\nstatic const GRAVITY = 0.015;\nstatic const BASE_SPEED = 0.1;\n\nlet/velX=BASE_SPEED\nlet/velY=0\n\nlet/dummy=true\nstatic const FRAME_RATE = 1000 / 60;\nscript\n  --\n  if (lastFrame !== null) {\n    dummy = !dummy;\n    const currentTime = now();\n    let gameTime: number | null = lastFrame;\n    if (gameTime && currentTime - gameTime > FRAME_RATE) {\n      gameTime += FRAME_RATE;\n      let nextPos = [ballPos[0] + velX, ballPos[1] + velY];\n\n      // ground collision\n      if (\n        input.tiles[Math.floor(nextPos[1] + 1)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ] === TileType.Ground\n      ) {\n        velY = jumping ? GRAVITY * -16 : 0;\n        nextPos[1] = Math.floor(nextPos[1]);\n      } else {\n        velY += GRAVITY;\n      }\n\n      // death\n      if (\n        nextPos[1] > input.tiles.length + 10 ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 1)\n        ] === TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.8)]?.[\n          Math.floor(nextPos[0] + 0.8)\n        ] === TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1])]?.[Math.floor(nextPos[0] + 0.5)] ===\n          TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.2)]?.[\n          Math.floor(nextPos[0] + 0.8)\n        ] === TileType.Ground ||\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ] === TileType.Fire\n      ) {\n        nextPos = [...startPos];\n        gameTime = null;\n        velX = BASE_SPEED;\n        velY = 0;\n        deaths++;\n      }\n      switch (\n        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[\n          Math.floor(nextPos[0] + 0.5)\n        ]\n      ) {\n        case TileType.Goal:\n          gameTime = null;\n          victory = true;\n          input.onVictory();\n          break;\n        case TileType.DirectLeft:\n          velX = -Math.abs(velX);\n          break;\n        case TileType.DirectRight:\n          velX = Math.abs(velX);\n          break;\n        case TileType.Spring:\n          velY = GRAVITY * -26;\n          break;\n        case TileType.SpeedLeft:\n          if (\n            (Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5) ||\n              Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5)) &&\n            velX !== BASE_SPEED\n          ) {\n            velX -= BASE_SPEED / 2;\n          }\n          break;\n        case TileType.SpeedRight:\n          if (\n            (Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5) ||\n              Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5)) &&\n            velX !== -BASE_SPEED\n          ) {\n            velX += BASE_SPEED / 2;\n          }\n          break;\n      }\n      ballPos = nextPos;\n    }\n    lastFrame = gameTime;\n  }\n  --\n\ndiv.game [\n  onPointerdown=startOrJump\n  onPointerup() {\n    jumping = false;\n  }\n]\n  div.view style={ \"--x\": ballPos[0], \"--y\": ballPos[1] }\n    div class={\n      ball: true,\n      moving: lastFrame !== null,\n    }\n\n    for|{ x, y, type }| of=input.tiles.flatMap((row, y) =>\n      row.flatMap((type, x) =>\n        type === TileType.Empty || type === TileType.Start\n          ? []\n          : [{ x, y, type }],\n      ),\n    )\n      if=tileClasses[type]\n        div class=tileClasses[type] style={ \"--x\": x, \"--y\": y }\n      html-comment\n\nstyle\n  --\n  .game {\n    position: fixed;\n    inset: 0;\n    z-index: -1;\n    user-select: none;\n    view-transition-name: level;\n  }\n\n  .game .view {\n    position: absolute;\n    left: calc(50vw - 2.5vmax + var(--x) * -5vmax);\n    top: calc(50vh - 2.5vmax + var(--y) * -5vmax);\n  }\n\n  .game .view div {\n    position: absolute;\n    width: 5vmax;\n    height: 5vmax;\n    left: calc(var(--x) * 5vmax);\n    top: calc(var(--y) * 5vmax);\n    background-size: cover;\n    image-rendering: pixelated;\n  }\n\n  .ground {\n    background-image: url(\"assets/ground.png\");\n    z-index: -1;\n  }\n\n  .goal {\n    background-image: url(\"assets/flag.png\");\n  }\n\n  .left-sign {\n    background-image: url(\"assets/left-sign.png\");\n  }\n\n  .right-sign {\n    background-image: url(\"assets/right-sign.png\");\n  }\n\n  .spring {\n    background-image: url(\"assets/spring.png\");\n  }\n\n  .speed-left {\n    background-image: url(\"assets/speed-left.png\");\n  }\n\n  .speed-right {\n    background-image: url(\"assets/speed-right.png\");\n  }\n\n  .ball {\n    background-image: url(\"assets/ball.png\");\n    z-index: 1;\n\n    transform: rotate(calc(var(--x) * 45deg));\n\n    view-transition-name: ball;\n  }\n\n  .fire {\n    background-image: url(\"assets/fire.gif\");\n  }\n\n  ::view-transition-old(ball) {\n    animation: 250ms ease-out both ball-exit;\n  }\n  ::view-transition-new(ball) {\n    animation: 250ms 1s ease-out both ball-exit reverse;\n  }\n  @keyframes ball-exit {\n    from {\n      translate: 0 0;\n    }\n    to {\n      translate: 0 -70vh;\n    }\n  }\n\n  ::view-transition-old(level) {\n    animation: 1s linear both slide-to-left;\n  }\n  ::view-transition-new(level) {\n    animation: 1s linear both slide-from-right;\n  }\n  @keyframes slide-to-left {\n    from {\n      translate: 0 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    to {\n      translate: -200% 0;\n      opacity: 0;\n    }\n  }\n  @keyframes slide-from-right {\n    from {\n      translate: 200% 0;\n      opacity: 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    to {\n      translate: 0 0;\n    }\n  }\n  --\n"],"names":["TileType","Ground","Fire","Goal","DirectLeft","DirectRight","Spring","SpeedLeft","SpeedRight","now","_now","GRAVITY","BASE_SPEED","FRAME_RATE","_expr_x_y$ifBody","_$","_scope","_","x","y","_type_type$ifBody","type_type","_y$ifBody","_x$ifBody","_ifBody","_if$forBody","_type_type$forBody","_type$forBody","type","_y$forBody","_x$forBody","_pattern_$forBody","_pattern_","_params_2$forBody","_params_2","_forBody","_expr_input_tiles_input_onVictory_startPos_ballPos_0_ballPos_1_lastFrame_jumping_deaths_velX_velY_dummy_effect","input_tiles","input_onVictory","startPos","ballPos_0","ballPos_1","lastFrame","jumping","deaths","velX","velY","dummy","_dummy","currentTime","gameTime","nextPos","Math","floor","_velY","length","_velX","abs","_ballPos","_lastFrame","_expr_input_tiles_input_onVictory_startPos_ballPos_0_ballPos_1_lastFrame_jumping_deaths_velX_velY_dummy","_expr_input_tiles_length_input_tiles_i_length_input_tiles_i_j","_startPos","_startPos2","_expr_ballPos_0_ballPos_","_for","_deaths","_startOrJump_effect","startOrJump","document","addEventListener","e","target","Element","matches","key","signal","_jumping","_startOrJump","ball","moving","_startOrJump2","_ballPos_2","_victory","victory","_ballPos_","ballPos","_input_onVictory_","_input_tiles_i_j","_input_tiles_i_length","_input_tiles_i","input_tiles_i","j","_input_tiles_length","_input_tiles_","i","flatMap","row","Empty","Start","_setup__effect","_setup_","_localLet","_localLet_input","value","$global","params","id","timeline","input_tiles_length","input_tiles_i_length","input_tiles_i_j"],"mappings":"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"}