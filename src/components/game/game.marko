export enum TileType {
  Empty,
  Ground,
  Fire,
  Start,
  Goal,
  DirectLeft,
  DirectRight,
  Spring,
  SpeedRight,
  SpeedLeft,
  Collectible,
}
static const tileClasses: { [type in TileType]?: string } = {
  [TileType.Ground]: "ground",
  [TileType.Fire]: "fire",
  [TileType.Goal]: "goal",
  [TileType.DirectLeft]: "left-sign",
  [TileType.DirectRight]: "right-sign",
  [TileType.Spring]: "spring",
  [TileType.SpeedLeft]: "speed-left",
  [TileType.SpeedRight]: "speed-right",
  [TileType.Collectible]: "collectible",
};
export interface Input {
  tiles: TileType[][];
  onVictory: () => void;
}
static declare global {
  namespace Marko {
    namespace CSS {
      export interface Properties {
        "--x": number;
        "--y": number;
      }
    }
  }
}

const/startPos=((): [number, number] => {
  for (let i = 0; i < input.tiles.length; i++) {
    for (let j = 0; j < input.tiles[i].length; j++) {
      if (input.tiles[i][j] === TileType.Start) {
        return [j, i];
      }
    }
  }
  return [0, 0];
})()

let/ballPos=[...startPos]
client function now() {
  return +document.timeline.currentTime!;
}

let/lastFrame=null as number | null
let/jumping=false

const/startOrJump() {
  if (lastFrame === null) {
    lastFrame = now();
  } else {
    jumping = true;
  }
}

script
  --
  document.addEventListener(
    "keydown",
    (e) => {
      if (
        e.target instanceof Element &&
        e.target.matches("button, [role='button'], input, select, textarea")
      ) {
        return;
      }
      if (e.key === " ") {
        startOrJump();
      }
    },
    {
      signal: $signal,
    },
  );
  document.addEventListener(
    "keyup",
    (e) => {
      if (e.key === " ") {
        jumping = false;
      }
    },
    {
      signal: $signal,
    },
  );
  --

local-let/deaths=0 key=`level-${$global.params.id}-deaths`
local-let/victory=false key=`level-${$global.params.id}-victory`
static const GRAVITY = 0.015;
static const BASE_SPEED = 2;

let/velX=BASE_SPEED
let/velY=0
let/collected=({} as { [key: `${number},${number}`]: boolean })

let/dummy=true
static const FRAME_RATE = 1000 / 60;
script
  --
  if (lastFrame !== null) {
    dummy = !dummy;
    const currentTime = now();
    let gameTime: number | null = lastFrame;
    if (gameTime && currentTime - gameTime > FRAME_RATE * 30) {
      gameTime = currentTime;
    } else if (gameTime && currentTime - gameTime > FRAME_RATE) {
      gameTime += FRAME_RATE;
      let nextPos = [ballPos[0] + velX * 0.05, ballPos[1] + velY];

      // ground collision
      if (
        input.tiles[Math.floor(nextPos[1] + 1)]?.[
          Math.floor(nextPos[0] + 0.5)
        ] === TileType.Ground
      ) {
        velY = jumping ? GRAVITY * -16 : 0;
        nextPos[1] = Math.floor(nextPos[1]);
      } else {
        velY += GRAVITY;
      }

      // death
      if (
        nextPos[1] > input.tiles.length + 10 ||
        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[
          Math.floor(nextPos[0] + 1)
        ] === TileType.Ground ||
        input.tiles[Math.floor(nextPos[1] + 0.8)]?.[
          Math.floor(nextPos[0] + 0.8)
        ] === TileType.Ground ||
        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[Math.floor(nextPos[0])] ===
          TileType.Ground ||
        input.tiles[Math.floor(nextPos[1] + 0.2)]?.[
          Math.floor(nextPos[0] + 0.8)
        ] === TileType.Ground ||
        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[
          Math.floor(nextPos[0] + 0.5)
        ] === TileType.Fire
      ) {
        nextPos = [...startPos];
        gameTime = null;
        velX = BASE_SPEED;
        velY = 0;
        deaths++;
        collected = {};
      }
      switch (
        input.tiles[Math.floor(nextPos[1] + 0.5)]?.[
          Math.floor(nextPos[0] + 0.5)
        ]
      ) {
        case TileType.Goal:
          gameTime = null;
          victory = true;
          input.onVictory();
          break;
        case TileType.DirectLeft:
          velX = -Math.abs(velX);
          break;
        case TileType.DirectRight:
          velX = Math.abs(velX);
          break;
        case TileType.Spring:
          velY = GRAVITY * -26;
          break;
        case TileType.SpeedLeft:
          if (
            (Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5) ||
              Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5)) &&
            velX !== BASE_SPEED
          ) {
            velX -= BASE_SPEED / 2;
          }
          break;
        case TileType.SpeedRight:
          if (
            (Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5) ||
              Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5)) &&
            velX !== -BASE_SPEED
          ) {
            velX += BASE_SPEED / 2;
          }
          break;
        case TileType.Collectible:
          if (
            Math.floor(ballPos[0] + 0.5) !== Math.floor(nextPos[0] + 0.5) ||
            Math.floor(ballPos[1] + 0.5) !== Math.floor(nextPos[1] + 0.5)
          ) {
            collected = {
              ...collected,
              [`${Math.floor(nextPos[0] + 0.5)},${Math.floor(nextPos[1] + 0.5)}`]: true,
            };
          }
          break;
      }
      ballPos = nextPos;
    }
    lastFrame = gameTime;
  }
  --

div.game [
  onPointerdown=startOrJump
  onPointerup() {
    jumping = false;
  }
]
  div.view style={ "--x": ballPos[0], "--y": ballPos[1] }
    div class={
      ball: true,
      moving: lastFrame !== null,
    }

    for|{ x, y, type }| of=input.tiles.flatMap((row, y) =>
      row.flatMap((type, x) =>
        type === TileType.Empty || type === TileType.Start
          ? []
          : [{ x, y, type }],
      ),
    )
      const/tileClass=tileClasses[type]
      if=tileClass
        div [
          class=[tileClass, collected[`${x},${y}`] && " collected"]
          style={ "--x": x, "--y": y }
        ]
      html-comment

style
  --
  .game {
    position: fixed;
    inset: 0;
    z-index: -1;
    user-select: none;
    view-transition-name: level;
  }

  .game .view {
    position: absolute;
    left: calc(50vw - 2.5vmax + var(--x) * -5vmax);
    top: calc(50vh - 2.5vmax + var(--y) * -5vmax);
  }

  .game .view div {
    position: absolute;
    width: 5vmax;
    height: 5vmax;
    left: calc(var(--x) * 5vmax);
    top: calc(var(--y) * 5vmax);
    background-size: cover;
    image-rendering: pixelated;
  }

  .ground {
    background-image: url("assets/ground.png");
    z-index: -1;
  }

  .goal {
    background-image: url("assets/flag.png");
  }

  .left-sign {
    background-image: url("assets/left-sign.png");
  }

  .right-sign {
    background-image: url("assets/right-sign.png");
  }

  .spring {
    background-image: url("assets/spring.png");
  }

  .speed-left {
    background-image: url("assets/speed-left.png");
  }

  .speed-right {
    background-image: url("assets/speed-right.png");
  }

  .fire {
    background-image: url("assets/fire.gif");
  }

  .ball {
    background-image: url("assets/ball.png");
    z-index: 1;

    transform: rotate(calc(var(--x) * 45deg));

    view-transition-name: ball;
  }

  .collectible {
    background-image: url("assets/collectible.gif");

    &.collected {
      transition: 1s all;
      transform: translateY(-5vmax) rotate(720deg) scale(1.5);
      opacity: 0;
    }
  }

  ::view-transition-old(ball) {
    animation: 250ms ease-out both ball-exit;
  }
  ::view-transition-new(ball) {
    animation: 250ms 1s ease-out both ball-exit reverse;
  }
  @keyframes ball-exit {
    from {
      translate: 0 0;
    }
    to {
      translate: 0 -70vh;
    }
  }

  ::view-transition-old(level) {
    animation: 1s linear both slide-to-left;
  }
  ::view-transition-new(level) {
    animation: 1s linear both slide-from-right;
  }
  @keyframes slide-to-left {
    from {
      translate: 0 0;
    }
    50% {
      opacity: 1;
    }
    to {
      translate: -200% 0;
      opacity: 0;
    }
  }
  @keyframes slide-from-right {
    from {
      translate: 200% 0;
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    to {
      translate: 0 0;
    }
  }
  --
